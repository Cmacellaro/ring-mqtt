#!/usr/bin/with-contenv bashio

# =============================================================================
# ring-mqtt run script for s6-init               #
#
# This script automatically detects if it is running as the Home Assistant 
# addon or a standard docker environment and sets configuration variables as 
# appropriate for the detected environment.
# ==============================================================================

# Delay to keep logs messages from overlapping with s6 logs
sleep .5

if [ -f /data/options.json ]; then
    export RUNMODE=addon
    export BRANCH=$(bashio::config "branch")
    export DEBUG=$(bashio::config "debug")
else
    export RUNMODE=docker
    # If debug is not explicitly defined, use default
    if [ ! -v DEBUG ]; then
        export DEBUG="ring-*"
    fi
fi

if [ -v BRANCH ]; then
    if [ "${BRANCH}" = "latest" ] || [ "${BRANCH}" = "dev" ]; then
        cd "/app/ring-mqtt-${BRANCH}"
    else
        cd /app/ring-mqtt
    fi
else
    cd /app/ring-mqtt
fi

echo "-------------------------------------------------------"
echo -n "ring-mqtt.js version: "
echo $(cat package.json | grep version | cut -f4 -d'"')
echo Node version $(node -v)
echo NPM version $(npm -v)
git --version
echo "-------------------------------------------------------"

if [ "${RUNMODE}" = "addon" ]; then
    # Export a few helper variables for building the Streaming and Still Image URLs
    export HAHOSTNAME=$(bashio::info.hostname)
    export ADDONHOSTNAME=$HOSTNAME

    # Setup the MQTT environment options based on addon configuration settings
    MQTTURL=$(bashio::config "mqtt_url")
    MQTTHOST=$(bashio::config "mqtt_host")
    MQTTPORT=$(bashio::config "mqtt_port")
    MQTTUSER=$(bashio::config "mqtt_user")
    MQTTPASSWORD=$(bashio::config "mqtt_password")

    if [ $MQTTURL = 'null' ] || [ $MQTTURL = '<auto_detect>' ]; then
        if [ $MQTTHOST = '<auto_detect>' ]; then
            if bashio::services.available 'mqtt'; then
                case "$MQTTPORT" in
                    8883|8884)
                        # If using SSL/TLS then assume the hostname should be same as HA hostname
                        # This is the default configuration of Mosquitto addon, but it's of course
                        # possible that user generates customer certifiacate for MQTT addon with
                        # it's own hostname.  I can't figure out any way to detect this so far. 
                        MQTTHOST='${HAHOSTNAME}'
                        ;;
                    *)  
                        MQTTHOST=$(bashio::services mqtt "host")
                        if [ $MQTTHOST = 'localhost' ] || [ $MQTTHOST = '127.0.0.1' ]; then
                            echo "Discovered invalid value for MQTT host: ${MQTTHOST}"
                            echo "Overriding with default alias for Mosquitto MQTT addon"
                            MQTTHOST="core-mosquitto"
                        fi
                        ;;
                esac
                echo "Discovered MQTT Host: ${MQTTHOST}"
            else
                echo "No Home Assistant MQTT service found, using Home Assistant hostname as default"
                MQTTHOST="${HAHOSTNAME}"
                echo "Discovered MQTT Host: ${MQTTHOST}"
            fi
        else
            echo "Configured MQTT Hostname: ${MQTTHOST}"
        fi

        if [ $MQTTPORT = '<auto_detect>' ]; then
            if bashio::services.available 'mqtt'; then
                MQTTPORT=$(bashio::services mqtt "port")
                echo "Discovered MQTT Port: ${MQTTPORT}"
            else
                MQTTPORT="1883"
                echo "Default MQTT Port: ${MQTTPORT}"
            fi
        else
            echo "Configured MQTT Port: ${MQTTPORT}"
        fi

        if [ $MQTTUSER = '<auto_detect>' ]; then
            if bashio::services.available 'mqtt'; then
                MQTTUSER=$(bashio::services mqtt "username")
                echo "Discovered MQTT User: ${MQTTUSER}"
            else
                MQTTUSER=""
                echo "Using anonymous MQTT connection"
            fi
        else
            echo "Configured MQTT User: ${MQTTUSER}"
        fi

        if [ $MQTTPASSWORD = '<auto_detect>' ]; then
            if bashio::services.available 'mqtt'; then
                MQTTPASSWORD=$(bashio::services mqtt "password")
                echo "Discovered MQTT password: <hidden>"
            else
                MQTTPASSWORD=""
            fi
        else
            echo "Configured MQTT password: <hidden>"
        fi

        case "$MQTTPORT" in
            8883|8884) MQTTURLPREFIX='mqtts://' ;;
            *) MQTTURLPREFIX='mqtt://' ;;
        esac

        if [ ! -z $MQTTUSER ] && [ ! -z $MQTTPASSWORD ]; then
            MQTTURL="${MQTTURLPREFIX}${MQTTUSER}:${MQTTPASSWORD}@${MQTTHOST}:${MQTTPORT}"
            echo "Using generated MQTT URL: ${MQTTURLPREFIX}${MQTTUSER}:<hidden>@${MQTTHOST}:${MQTTPORT}"
        else
            MQTTURL="${MQTTURLPREFIX}@${MQTTHOST}:${MQTTPORT}"
            echo "Using generated MQTT URL: ${MQTTURLPREFIX}${MQTTHOST}:${MQTTPORT}"
        fi
    else
        echo "Using configured MQTT URL: ${MQTTURL}"
    fi
fi
export MQTTURL
echo "-------------------------------------------------------"
echo "Running ring-mqtt..."
exec ./ring-mqtt.js
